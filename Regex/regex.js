"use strict";

//—Ç–∞–∫ —É–∂–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è
//new RegExp("pattern", "flags");

// const ans = prompt("–≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è");

// const reg = /n/i;

//—Ñ–ª–∞–≥–∏ –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä /n/igm;

//—Å–ø–∏—Å–æ–∫ —Ñ–ª–∞–≥–æ–≤
// i - –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞
// g - –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
// m - –≤–∫–ª—é—á–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–∂–∏–º


//–Ω–∞ –≤—ã—Ö–æ–¥–µ, –µ—Å–ª–∏ –±—É–∫–≤–∞ n –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –µ—ë –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç–æ -1
//–º–µ—Ç–æ–¥ search –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –∏ —Å —Ñ–ª–∞–≥–æ g —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç
// console.log(ans.search(reg));

//–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤
// console.log(ans.match(reg));

// const pass = prompt("Password");

//–º–µ—Ç–æ–¥ replace –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞, —Ä–µ–≥—É–ª—è—Ä–∫—É –∏ –Ω–∞ —á—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
// /./ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

// console.log(pass.replace(/./g, "*"));

//–ø—Ä–∏–º–µ—Ä —Å —ç–∫—Ä–∞–Ω–∏–µ—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–æ—á–∫–∏
// console.log(pass.replace(/\./g, "*"));

// console.log('12-55-66'.replace(/-/g, ":"));

//–ø—Ä–∏–º–µ—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏—è—Ö

// const str = "My name is R2D2";

// console.log(str.match(/\w\d\w\d/i));

const str = ":apple: <@viktor> sadjhabsdj bjshdba üçé üçå :ananas: apple viktor sadsadsad 13213213 apple <@kate> üçé dkjbsakjd apple <@kate> :grape: :apple:";
let removeRubish = str.replace(/[\:\<@\>]/g, '');
removeRubish = removeRubish.replace(/[^viktor aple]/g, '');

let viktor = removeRubish.split(' ').filter(item => item === 'viktor' || item === 'apple');
let kate = removeRubish.split(' ').filter(item => item === 'kate' || item === 'apple');

console.log(removeRubish);
console.log(kate.join(' ').match(/kate apple/g));
console.log(viktor.join(' ').match(/viktor apple/g));

const string = "the-stealth_warrior";

function toCamelCase(string) {
    if (string === '' || typeof (string) === 'undefined' || string === null) {
        return '';
    }

    if (string.match(/\-/g) !== null && string.match(/\-/g).length > 0) {
        let dashes = string.match(/\-\w/g).map(item => item.toUpperCase());

        for (let i = 0; i < dashes.length; i++) {
            string = string.replace(/\-\w/, dashes[i]).replace(/\-/, '');
        }
    }

    if (string.match(/\_/g) !== null && string.match(/\_/g).length > 0) {
        let underlines = string.match(/\_\w/g).map(item => item.toUpperCase());

        for (let i = 0; i < underlines.length; i++) {
            string = string.replace(/\_\w/, underlines[i]).replace(/\_/, '');
        }
    }

    return string;
}

// console.log(toCamelCase(string));

//–∞ –≤–æ—Ç –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É —Ä–µ—à–∞—Ç—å –Ω–∞–¥–æ –±—ã–ª–æ

function toCamelCase1(string) {
    var regExp = /[-_]\w/ig;
    return string.replace(regExp, function (match) {
        return match.charAt(1).toUpperCase();
    });
}

console.log(toCamelCase1(string));

//–º–æ—ë —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω-–∫–æ–¥–∞
let pin = '-1.234';

function validatePIN(pin) {
    let checked = pin.match(/\D/gi);
    if (checked !== null) {
        return false;
    }
    return pin.length === 4 || pin.length === 6 ? true : false;
}

console.log(validatePIN(pin));

//–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∏–Ω-–∫–æ–¥–∞
function validatePIN(pin) {
    return /^(\d{4}|\d{6})$/.test(pin);
}

function solution(data) {
    if(data === '') {
        return [];
    } else if (data.length === 1) {
        return [`${data}_`];
    }

    let regex = /\w/gi;
    regex.lastIndex = data.length - 1;
    return data.length % 2 === 0 ? data.match(/\w{2}/g) : (data.match(/\w{2}/g) + `,${regex.exec(data)}_`).split(',');
}

console.log(solution('abcde'));

//–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
function solution(s){
    return (s+"_").match(/.{2}/g)||[];
 }

let url = ' https://www.7uwjwzhu9fejuj7uqp01kuh6.co/error';
function domainName(url){
    let result = url.split('').map(item => item == '.' || item == '/' ? item = ' ' : item)
                    .join('')
                    .match(/\w.+\s/g)
                    .join('').trim()
                    .split(' ')
                    .filter(item => item !== '' && item !== 'www' && item !== "https:" && item !== "http:");

    return result[0];
}

console.log(domainName(url));

//–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø–æ–∏—Å–∫—É –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∞–π—Ç–∞
function domainName(url){
    url = url.replace("https://", '');
    url = url.replace("http://", '');
    url = url.replace("www.", '');
    return url.split('.')[0];
}

const ip = '123.193.149.10';
function isValidIP(ip) {
    let splittedIp = ip.split('.').filter(item => item !== '');
    let toggler = true;

    if(splittedIp.length < 4 || splittedIp.length > 4) {
        return false;
    }

    splittedIp.forEach(item => {
        if(item > 255) {
            toggler = false;
        }
        if(item[0] == '0' || item[1] != 'undefined') {
            console.log(item[1]);
            toggler = false;
        }
        if(item.match(/\D/ig) !== null) {
            toggler = false;
        }
    });
    return toggler;
  }

console.log(isValidIP(ip));